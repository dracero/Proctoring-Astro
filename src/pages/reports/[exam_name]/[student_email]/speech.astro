---
// Access the dynamic route parameters `exam_name` and `student_email`
const { exam_name, student_email } = Astro.params;

// Define an async function to fetch the speech detection data for the given exam and student
async function fetchSpeechData(exam, student) {
  try {
    const response = await fetch(`https://proctoring-backend.onrender.com/reports/${exam}/${student}/speech_detection`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const speechData = await response.json();
    return speechData;
  } catch (error) {
    console.error('Failed to fetch speech detection data:', error);
    return []; // Return an empty array as a fallback
  }
}

// Fetch the speech detection data using the exam name and student email
const speechData = await fetchSpeechData(exam_name, student_email);
---

<html>
<head>
    <title>Speech Detection events for {student_email}</title>
    <style>
      body {
          font-family: 'Arial', sans-serif;
          margin: 0;
          padding: 0;
          display: flex;
          justify-content: center;
          align-items: center;
          flex-direction: column;
          height: 100vh;
          background-color: #f4f4f4;
      }

      h2 {
          color: #007BFF;
          font-size: 2.5rem;
          letter-spacing: 0.1em;
          margin-bottom: 1rem;
          padding-bottom: 0.5rem;
          width: max-content;
          animation: fadeIn 1s ease-out;
      }

      .speech-table {
          border-collapse: separate;
          border-spacing: 0;
          min-width: 50%;
          box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
          animation: slideIn 0.5s ease-out, fadeIn 0.5s ease-out;
      }

      .speech-table th, .speech-table td {
          border-right: 1px solid #dee2e6;
          border-bottom: 1px solid #dee2e6;
          padding: 10px 15px;
          width: 120px; /* Fixed width for all cells */
          min-width: 120px; /* Minimum width for all cells */
          transition: transform 0.3s ease, box-shadow 0.3s ease;
          font-weight: bold; /* Make all text bold */
      }

      .speech-table th:first-child, .speech-table td:first-child {
          border-left: 1px solid #dee2e6;
      }

      .speech-table th {
          background-color: #7ac2da; /* Light blue background for table headers */
          color: white;
          text-transform: uppercase;
          letter-spacing: 0.1em;
      }

      .speech-table td {
          background-color: white;
          color: #333;
      }

      @keyframes slideIn {
          from {
              transform: translateY(50px);
          }
          to {
              transform: translateY(0);
          }
      }

      @keyframes fadeIn {
          from {
              opacity: 0;
          }
          to {
              opacity: 1;
          }
      }
    </style>
</head>
<body>
    <h2>Speech Detection - {student_email}</h2>
    <table class="speech-table">
      <thead>
        <tr>
          <th>Time</th>
          <th>Conversation</th>
        </tr>
      </thead>
      <tbody>
        {speechData.map((speechEvent, index) => (
          <tr key={index}>
            <td>{speechEvent.time}</td>
            <td>{speechEvent.conversation}</td>
          </tr>
        ))}
      </tbody>
    </table>
</body>
</html>
